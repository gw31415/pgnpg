---
import Main from "../../../layouts/Main.astro";
---
<Fragment slot="head">
	<link rel="canonical" href="https://pgn.amas.dev/profile/" />
	<script is:inline src="https://cdn.jsdelivr.net/npm/js-circle-progress/dist/circle-progress.min.js" type="module"></script>
</Fragment>

<Main>
	<Fragment slot="raw">
		<div id="tmsg" class="typing topmsg">Loading...</div>
	</Fragment>
	<Fragment slot="header">
		<b id="title" class="typing">/@</b>
	</Fragment>

	<section style="height:calc(100vh - 4rem);margin-bottom:2rem;display:flex;flex-direction:column;align-items:center;justify-content:space-evenly">
		<h1 id="level" style="opacity:0;transition:opacity 1s;font-size:3.5rem;font-family:'Jersey 10',monospace"></h1>
		<div><circle-progress text-format="vertical"></circle-progress></div>
		<div id="updatedat" style="text-align:right"></div>
	</section>
	<section id="inspections">
		<h2>Inspections</h2>
		<table></table>
	</section>
	<section id="daily-chart" style="height:150vh">
		<h2>Daily PIX</h2>
		<canvas></canvas>
	</section>
</Main>

<style lang="scss" is:global>
	section {
		padding: 1rem;
		width: 800px;
		@media (max-width: 1000px) {
			width: 80vw;
		}
		@media (max-width: 480px) {
			width: 100vw;
		}
	}
	#inspections {
		table {
			th, td {
				padding: .5rem;
				border-bottom: 1px solid #ccc;
			}
			th {
				text-align: right;
				width: 40%;
			}
			td {
				text-align: left;
			}
		}
	}
	circle-progress::part(base) {
		height: 60vmin;
		width: 60vmin;
	}
	circle-progress::part(value) {
		stroke-width: 3px;
		stroke: white;
		stroke-linecap: round;
	}
	circle-progress::part(circle) {
		stroke-width: 6px;
		stroke: #888;
	}
	circle-progress::part(text) {
		fill: #888;
		font-family: 'Orbitron', sans-serif;
	}

	.rainbow {
		background: linear-gradient(to-right, #FF0000, #FF7F00, #FFFF00, #00FF00, #0000FF, #4B0082, #8B00FF);
		background: -webkit-linear-gradient(left, #FF0000, #FF7F00, #FFFF00, #00FF00, #0000FF, #4B0082, #8B00FF);
		background: -o-linear-gradient(right, #FF0000, #FF7F00, #FFFF00, #00FF00, #0000FF, #4B0082, #8B00FF);
		background: -moz-linear-gradient(right, #FF0000, #FF7F00, #FFFF00, #00FF00, #0000FF, #4B0082, #8B00FF);
		-webkit-background-clip: text;
		background-clip: text;
		-webkit-text-fill-color: transparent;
		text-fill-color: transparent;
	}

	header, main {
		opacity: 0;
	}

	header {
		padding: .5rem;
	}

	html.wf-active.ready {
		// wf-activeかつreadyなら非表示
		body {
			display: block;
		}
		header, main {
			transition: opacity .2s;
			opacity: 1;
			width: 100%;
			height: auto;
		}
		#tmsg {
			display: none; // wf-activeかつreadyなら非表示
		}
	}
</style>

<script>
import type {PgnLevel} from "../../../types";
import type  UserProfile from "../../../types";
import { loadTyping } from "../../../typing";

import WebFont from "webfontloader";

const tmsg = document.getElementById("tmsg") as HTMLDivElement;
loadTyping(tmsg);

interface Color<T extends PgnLevel = PgnLevel> {
	level: T,
	color: T extends "GrandMaster" ? undefined : string,
	min:  number,
}

const colors: Color[] = [
	{ level: "Iron", color: "#ac9393", min: 0 },
	{ level: "Bronze", color: "#aa4400", min: 500 },
	{ level: "Silver", color: "#a7a7a7", min: 1000 },
	{ level: "Gold", color: "#c8ab37", min: 2500 },
	{ level: "Platinum", color: "black", min: 5000 },
	{ level: "Diamond", color: "#00aad4", min: 10000 },
	{ level: "Master", color: "#6A0DAD", min: 20000 },
	{ level: "GrandMaster", color: undefined, min: 35000 },
]

const data: UserProfile = await fetch("data.json").then((res) => {
	if (!res.ok) {
		tmsg.textContent = "User Not Found.";
		tmsg.style.display = "block";
		loadTyping(tmsg);
		return undefined;
	}
	return res.json();
});

if (data === undefined) {
	document.title ="Not Found - PGN Profile";
	throw new Error("User Not Found.");
} else {
	document.title = `@${data.user.pgrit_id} - PGN Profile`;
}

WebFont.load({
	google: {
		families: ['Jersey 10'],
		text: "IronBronzeSilverGoldPlatinumDiamondMasterGrandMaster",
	}
});
WebFont.load({
	google: {
		families: ['Orbitron'],
		text: "0123456789%",
	}
});

async function start() {
	document.getElementById("title")!.textContent = '/@' + data.user.pgrit_id;
	document.getElementById("updatedat")!.textContent = `Updated at ${new Date(data.pgn.updated_at).toLocaleString()}`;

	document.querySelectorAll(".typing").forEach((e) => loadTyping(e as HTMLDivElement));

	const circle = document.getElementsByTagName("circle-progress")[0]! as HTMLElement;
	if (data.pgn.level === "GrandMaster") {
		circle.setAttribute("value","100");
		circle.setAttribute("max","100");
		circle.setAttribute("text-format", "percent");
	} else {
		circle.setAttribute("value", `${data.pgn.on_level}`);
		circle.setAttribute("max", `${data.pgn.level_length}`);
	}

	const level = document.getElementById("level")!;
	const color = colors.find((c) => c.level === data.pgn.level)!;
	if (color.color) {
		level.style.color = color.color;
	} else {
		level.classList.add("rainbow");
	}
	level.style.opacity = "1";
	level.textContent = `${data.pgn.level}`;

	document.getElementsByTagName("html")[0]!.classList.add("ready");

	const daily = Object.entries(data.pgn.daily).sort((a, b) => -a[0].localeCompare(b[0]));

	const dailyChart = document.querySelector("#daily-chart canvas") as HTMLCanvasElement;
	dailyChart.height = document.getElementById("daily-chart")!.offsetHeight;
	dailyChart.width = document.getElementById("daily-chart")!.offsetWidth;

	const nextLevel = data.pgn.level === "GrandMaster" ? undefined : colors[colors.findIndex((c) => c.level === data.pgn.level) + 1];
	const inspections: { key: string, value: string }[] = [
		{ key: "Earned pix (1M)", value: data.pgn.last_month.toString() },
		{ key: "Next Lv.", value: nextLevel?.level ?? "-"},
		{ key: "Required pix for the Next Lv.", value: data.pgn.level_length?.toString() ?? "-" },
		{ key: "Remaining", value: data.pgn.behind_next?.toString() ?? "-" },
		{ key: "Progress on the Lv.", value: data.pgn.progress === undefined ? "-" : (data.pgn.progress * 100).toPrecision(3) + "%" },
	];
	const inspectionTable = document.querySelector("#inspections table") as HTMLTableElement;
	inspections.forEach(({ key, value }) => {
		const tr = document.createElement("tr");
		const th = document.createElement("th");
		th.textContent = key;
		const td = document.createElement("td");
		const span = document.createElement("span");
		span.textContent = value;
		if (key === "Next Lv.") {
			if (nextLevel) {
				span.style.fontFamily = "'Jersey 10', monospace";
				span.style.fontSize = "1.5em";
				if (nextLevel.color) {
					span.style.color = nextLevel.color as string;
				} else {
					span.classList.add("rainbow");
				}
			}
		}
		td.appendChild(span);
		tr.appendChild(th);
		tr.appendChild(td);
		inspectionTable.appendChild(tr);
	});

	const chartjs = await import("chart.js/auto");
	new chartjs.Chart(dailyChart, {
		type: "bar",
		data: {
			labels: daily.map(([k]) => k.slice(5).replace(/^0/g, "").replace(/-0/g, "-").replace("-", "/")),
			datasets: [{
				data: daily.map(([_, v]) => v),
				backgroundColor: daily.map(([_, v]) => colors
					.toSorted((a, b)=> b.min - a.min)
					.find((c) => c.min <= v * 30)?.color ?? "#ff5555"),
				borderWidth: 0,
			}]
		},
		options: {
			indexAxis: 'y',
			plugins: {
				legend: {
					display: false,
				},
			},
			scales: {
				y: {
					beginAtZero: true,
				},
			},
		},
	});
}
if (document.readyState === 'loading') document.addEventListener('DOMContentLoaded', start); else start();
</script>
