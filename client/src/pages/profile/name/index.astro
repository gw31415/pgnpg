---
import Main from "../../../layouts/Main.astro";
---
<Fragment slot="head">
	<script is:inline src="https://cdn.jsdelivr.net/npm/js-circle-progress/dist/circle-progress.min.js" type="module"></script>
</Fragment>

<Main>
	<header style="display:flex;justify-content:space-between;align-items:center">
		<div id="title" class="typing" style="font-size:2rem">@</div>
		<div id="updatedat" style="text-align:right"></div>
	</header>
	<main>
		<section style="height:calc(100vh - 6rem);margin-bottom:3rem;display:flex;flex-direction:column;align-items:center;justify-content:space-evenly">
			<h1 id="level" style="opacity:0;transition:opacity 1s;font-size:3.5rem;font-family:'Jersey 10',monospace"></h1>
			<div><circle-progress text-format="vertical"></circle-progress></div>
		</section>
		<section id="daily-chart" style="height:150vh;width:100vw;padding:.5rem">
			<h2>Daily PIX</h2>
			<canvas></canvas>
		</section>
	</main>
	<div class="typing" id="errmsg">Please Enable JavaScript.</div>
</Main>

<style lang="scss">
	circle-progress::part(base) {
		height: 60vmin;
		width: 60vmin;
	***REMOVED***
	circle-progress::part(value) {
		stroke-width: 3px;
		stroke: white;
		stroke-linecap: round;
	***REMOVED***
	circle-progress::part(circle) {
		stroke-width: 6px;
		stroke: #888;
	***REMOVED***
	circle-progress::part(text) {
		fill: #888;
		font-family: 'Orbitron', sans-serif;
	***REMOVED***

	.rainbow {
		background: linear-gradient(to-right, #FF0000, #FF7F00, #FFFF00, #00FF00, #0000FF, #4B0082, #8B00FF);
		background: -webkit-linear-gradient(left, #FF0000, #FF7F00, #FFFF00, #00FF00, #0000FF, #4B0082, #8B00FF);
		background: -o-linear-gradient(right, #FF0000, #FF7F00, #FFFF00, #00FF00, #0000FF, #4B0082, #8B00FF);
		background: -moz-linear-gradient(right, #FF0000, #FF7F00, #FFFF00, #00FF00, #0000FF, #4B0082, #8B00FF);
		-webkit-background-clip: text;
		background-clip: text;
		-webkit-text-fill-color: transparent;
		text-fill-color: transparent;
	***REMOVED***

	.typing {
		max-width: 100%;
		width: 0;
		animation: blink .5s step-end infinite alternate;
		white-space: nowrap;
		overflow: scroll;
		border-right: 2px solid;
		font-family: 'Roboto Mono', monospace;
	***REMOVED***

	@keyframes typing {
		from {
			width: 0
		***REMOVED***
	***REMOVED***

	@keyframes blink {
		50% {
			border-color: transparent
		***REMOVED***
	***REMOVED***

	@-webkit-keyframes svg {
		0% {
			stroke-dashoffset: 2000;
			fill: transparent;
		***REMOVED***

		40% {
			stroke-dashoffset: 2000;
			fill: transparent;
		***REMOVED***

		50% {
			fill: transparent;
		***REMOVED***

		100% {
			stroke-dashoffset: 0;
			fill: #888;
		***REMOVED***
	***REMOVED***

	header, main {
		transition: opacity .2s;
	***REMOVED***

	header {
		padding: .5rem;
	***REMOVED***

	body {
		display: flex;
		justify-content: center;
		align-items: center;
		header, main {
			opacity: 0;
			width: 0;
			height: 0;
			overflow: hidden;
		***REMOVED***
		#errmsg {
			display: block;
			transition: opacity .2s;
			animation: typing 2.6s steps(26), blink .4s step-end infinite alternate;
			width: 26ch;
		***REMOVED***
	***REMOVED***

	html.wf-active.ready {
		body {
			display: block;
		***REMOVED***
		header, main {
			opacity: 1;
			width: 100%;
			height: auto;
		***REMOVED***
		#errmsg {
			display: none;
		***REMOVED***
	***REMOVED***
</style>

<script>
import type {PgnLevel***REMOVED*** from "../../../types";
import type  UserProfile from "../../../types";

import WebFont from "webfontloader";

function enableTyping(e: Element, msg?: string) {
	const el = e as HTMLElement;
	if (msg) errmsg.textContent = msg;
	const len = `${el.textContent***REMOVED***`.length + 1;
	el.style.animation = `typing ${Math.min(1, 0.1 * len)***REMOVED***s steps(${len***REMOVED***), blink .4s step-end infinite alternate`;
	el.style.width = `${len***REMOVED***ch`;
	el.addEventListener("animationend", () => {
		el.style.animation = "none";
		el.style.borderRight = "none";
	***REMOVED***);
***REMOVED***

const errmsg = document.getElementById("errmsg")!;
enableTyping(errmsg, "Loading...");

const data: UserProfile = await fetch("data.json").then((res) => {
	if (!res.ok) {
		enableTyping(errmsg, "User Not Found.");
		errmsg.style.display = "block";
		return undefined;
	***REMOVED***
	return res.json();
***REMOVED***);

if (data === undefined) {
	document.title ="Not Found - PGN Profile";
	throw new Error("User Not Found.");
***REMOVED*** else {
	document.title = `@${data.user.pgrit_id***REMOVED*** - PGN Profile`;
***REMOVED***

WebFont.load({
	google: {
		families: ['Jersey 10'],
		text: "IronBronzeSilverGoldPlatinumDiamondMasterGrandMaster",
	***REMOVED***
***REMOVED***);
WebFont.load({
	google: {
		families: ['Orbitron'],
		text: "0123456789%",
	***REMOVED***
***REMOVED***);

interface Color<T extends PgnLevel = PgnLevel> {
	level: T,
	color: T extends "GrandMaster" ? undefined : string,
	min:  number,
***REMOVED***

const colors: Color[] = [
	{ level: "Iron", color: "#ac9393", min: 0 ***REMOVED***,
	{ level: "Bronze", color: "#aa4400", min: 500 ***REMOVED***,
	{ level: "Silver", color: "#a7a7a7", min: 1000 ***REMOVED***,
	{ level: "Gold", color: "#c8ab37", min: 2500 ***REMOVED***,
	{ level: "Platinum", color: "black", min: 5000 ***REMOVED***,
	{ level: "Diamond", color: "#00aad4", min: 10000 ***REMOVED***,
	{ level: "Master", color: "#6A0DAD", min: 20000 ***REMOVED***,
	{ level: "GrandMaster", color: undefined, min: 35000 ***REMOVED***,
]

async function start() {
	document.getElementById("title")!.textContent = '@' + data.user.pgrit_id;
	document.getElementById("updatedat")!.textContent = new Date(data.pgn.updated_at).toLocaleString();

	document.querySelectorAll(".typing").forEach((e) => enableTyping(e));

	const circle = document.getElementsByTagName("circle-progress")[0]! as HTMLElement;
	if (data.pgn.level === "GrandMaster") {
		circle.setAttribute("value","100");
		circle.setAttribute("max","100");
		circle.setAttribute("text-format", "percent");
	***REMOVED***else {
		circle.setAttribute("value", `${data.pgn.on_level***REMOVED***`);
		circle.setAttribute("max", `${data.pgn.level_length***REMOVED***`);
	***REMOVED***

	const level = document.getElementById("level")!;
	const color = colors.find((c) => c.level === data.pgn.level)!;
	if (color.color) {
		level.style.color = color.color;
	***REMOVED*** else {
		level.classList.add("rainbow");
	***REMOVED***
	level.style.opacity = "1";
	level.textContent = `${data.pgn.level***REMOVED***`;

	document.getElementsByTagName("html")[0]!.classList.add("ready");

	const daily = Object.entries(data.pgn.daily).sort((a, b) => -a[0].localeCompare(b[0]));

	const dailyChart = document.querySelector("#daily-chart canvas") as HTMLCanvasElement;
	dailyChart.height = document.getElementById("daily-chart")!.offsetHeight;
	dailyChart.width = document.getElementById("daily-chart")!.offsetWidth;

	const chartjs = await import("chart.js/auto");
	new chartjs.Chart(dailyChart, {
		type: "bar",
		data: {
			labels: daily.map(([k]) => k.slice(5).replace(/^0/g, "").replace(/-0/g, "-").replace("-", "/")),
			datasets: [{
				data: daily.map(([_, v]) => v),
				backgroundColor: daily.map(([_, v]) => colors
					.toSorted((a, b)=> b.min - a.min)
					.find((c) => c.min <= v * 28)?.color ?? "#ff5555"),
				borderWidth: 0,
			***REMOVED***]
		***REMOVED***,
		options: {
			indexAxis: 'y',
			plugins: {
				legend: {
					display: false,
				***REMOVED***,
			***REMOVED***,
			scales: {
				y: {
					beginAtZero: true,
				***REMOVED***,
			***REMOVED***,
		***REMOVED***,
	***REMOVED***);
***REMOVED***
if (document.readyState === 'loading') document.addEventListener('DOMContentLoaded', start); else start();
</script>
